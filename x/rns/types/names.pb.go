// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/rns/names.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Names struct {
	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expires    int64    `protobuf:"varint,2,opt,name=expires,proto3" json:"expires,omitempty"`
	Value      string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Data       string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Subdomains []*Names `protobuf:"bytes,5,rep,name=subdomains,proto3" json:"subdomains,omitempty"`
	Tld        string   `protobuf:"bytes,6,opt,name=tld,proto3" json:"tld,omitempty"`
	Locked     int64    `protobuf:"varint,7,opt,name=locked,proto3" json:"locked,omitempty"`
}

func (m *Names) Reset()         { *m = Names{} }
func (m *Names) String() string { return proto.CompactTextString(m) }
func (*Names) ProtoMessage()    {}
func (*Names) Descriptor() ([]byte, []int) {
	return fileDescriptor_41eb2d9613d98250, []int{0}
}

func (m *Names) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Names) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Names.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Names) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Names.Merge(m, src)
}

func (m *Names) XXX_Size() int {
	return m.Size()
}

func (m *Names) XXX_DiscardUnknown() {
	xxx_messageInfo_Names.DiscardUnknown(m)
}

var xxx_messageInfo_Names proto.InternalMessageInfo

func (m *Names) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Names) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *Names) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Names) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Names) GetSubdomains() []*Names {
	if m != nil {
		return m.Subdomains
	}
	return nil
}

func (m *Names) GetTld() string {
	if m != nil {
		return m.Tld
	}
	return ""
}

func (m *Names) GetLocked() int64 {
	if m != nil {
		return m.Locked
	}
	return 0
}

func init() {
	proto.RegisterType((*Names)(nil), "canine_chain.rns.Names")
}

func init() { proto.RegisterFile("canine_chain/rns/names.proto", fileDescriptor_41eb2d9613d98250) }

var fileDescriptor_41eb2d9613d98250 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4b, 0xc4, 0x30,
	0x1c, 0xc5, 0x1b, 0x7b, 0xed, 0x61, 0x5c, 0x8e, 0x20, 0x9a, 0x41, 0x42, 0x71, 0xea, 0x62, 0x0a,
	0x3a, 0xb8, 0x3b, 0x39, 0x88, 0x43, 0x47, 0x17, 0xf9, 0x37, 0x0d, 0x5e, 0xbc, 0x36, 0x29, 0x4d,
	0x2a, 0xe7, 0xb7, 0xf0, 0x33, 0x39, 0x39, 0xde, 0xe8, 0x28, 0xed, 0x17, 0x91, 0xa4, 0x0a, 0xc7,
	0x6d, 0xef, 0xf1, 0xff, 0xf1, 0xfe, 0x8f, 0x87, 0x2f, 0x04, 0x68, 0xa5, 0xe5, 0xb3, 0x58, 0x83,
	0xd2, 0x45, 0xaf, 0x6d, 0xa1, 0xa1, 0x95, 0x96, 0x77, 0xbd, 0x71, 0x86, 0xac, 0xf6, 0xaf, 0xbc,
	0xd7, 0xf6, 0xf2, 0x13, 0xe1, 0xe4, 0xd1, 0x13, 0x84, 0xe0, 0x85, 0x47, 0x29, 0xca, 0x50, 0x7e,
	0x5c, 0x06, 0x4d, 0x28, 0x5e, 0xca, 0x6d, 0xa7, 0x7a, 0x69, 0xe9, 0x51, 0x86, 0xf2, 0xb8, 0xfc,
	0xb7, 0xe4, 0x14, 0x27, 0x6f, 0xd0, 0x0c, 0x92, 0xc6, 0x01, 0x9f, 0x8d, 0xcf, 0xa8, 0xc1, 0x01,
	0x5d, 0xcc, 0x19, 0x5e, 0x93, 0x5b, 0x8c, 0xed, 0x50, 0xd5, 0xa6, 0x05, 0xa5, 0x2d, 0x4d, 0xb2,
	0x38, 0x3f, 0xb9, 0x3e, 0xe7, 0x87, 0x45, 0x78, 0x28, 0x51, 0xee, 0xa1, 0x64, 0x85, 0x63, 0xd7,
	0xd4, 0x34, 0x0d, 0x59, 0x5e, 0x92, 0x33, 0x9c, 0x36, 0x46, 0x6c, 0x64, 0x4d, 0x97, 0xa1, 0xcd,
	0x9f, 0xbb, 0xbb, 0xff, 0x1a, 0x19, 0xda, 0x8d, 0x0c, 0xfd, 0x8c, 0x0c, 0x7d, 0x4c, 0x2c, 0xda,
	0x4d, 0x2c, 0xfa, 0x9e, 0x58, 0xf4, 0xc4, 0x5f, 0x94, 0x5b, 0x0f, 0x15, 0x17, 0xa6, 0x2d, 0x5e,
	0x41, 0x6c, 0xa0, 0x79, 0x80, 0xca, 0x16, 0xf3, 0xf7, 0xab, 0x79, 0xa4, 0x6d, 0x98, 0xc9, 0xbd,
	0x77, 0xd2, 0x56, 0x69, 0xd8, 0xe9, 0xe6, 0x37, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x99, 0x81, 0xe4,
	0x47, 0x01, 0x00, 0x00,
}

func (m *Names) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Names) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Names) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Locked != 0 {
		i = encodeVarintNames(dAtA, i, uint64(m.Locked))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Tld) > 0 {
		i -= len(m.Tld)
		copy(dAtA[i:], m.Tld)
		i = encodeVarintNames(dAtA, i, uint64(len(m.Tld)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Subdomains) > 0 {
		for iNdEx := len(m.Subdomains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subdomains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNames(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNames(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintNames(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Expires != 0 {
		i = encodeVarintNames(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNames(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNames(dAtA []byte, offset int, v uint64) int {
	offset -= sovNames(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *Names) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNames(uint64(l))
	}
	if m.Expires != 0 {
		n += 1 + sovNames(uint64(m.Expires))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNames(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNames(uint64(l))
	}
	if len(m.Subdomains) > 0 {
		for _, e := range m.Subdomains {
			l = e.Size()
			n += 1 + l + sovNames(uint64(l))
		}
	}
	l = len(m.Tld)
	if l > 0 {
		n += 1 + l + sovNames(uint64(l))
	}
	if m.Locked != 0 {
		n += 1 + sovNames(uint64(m.Locked))
	}
	return n
}

func sovNames(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozNames(x uint64) (n int) {
	return sovNames(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *Names) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNames
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Names: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Names: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subdomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNames
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subdomains = append(m.Subdomains, &Names{})
			if err := m.Subdomains[len(m.Subdomains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tld", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tld = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			m.Locked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Locked |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNames(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNames
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipNames(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNames
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNames
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNames
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNames
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNames        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNames          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNames = fmt.Errorf("proto: unexpected end of group")
)
